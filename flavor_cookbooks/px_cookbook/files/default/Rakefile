require 'bundler/setup'

# Checks if we are inside a Continuous Integration machine.
#
# @return [Boolean] whether we are inside a CI.
# @example
#   ci? #=> false
def ci?
  ENV['CI'] == 'true'
end

default_kitchenci_env = ENV.fetch('DEFAULT_KITCHENCI_ENV', 'vagrant')

desc 'Clean some generated files'
task :clean do
  %w(
    Berksfile.lock
    .bundle
    .cache
    coverage
    Gemfile.lock
    .kitchen
    metadata.json
    vendor
  ).each { |f| FileUtils.rm_rf(Dir.glob(f)) }
end

namespace :style do
  require 'rubocop/rake_task'
  desc 'Run Ruby style checks using rubocop'
  RuboCop::RakeTask.new(:ruby)

  require 'foodcritic'
  desc 'Run Chef style checks using foodcritic'
  FoodCritic::Rake::LintTask.new(:chef)
end

desc 'Run all style checks'
task style: %w(style:chef style:ruby)

desc 'Run ChefSpec unit tests'
task :unit do
  require 'rspec/core/rake_task'

  RSpec::Core::RakeTask.new(:unit) do |t|
    t.pattern = 'spec/**{,/*/**}/*_spec.rb'
  end
end

desc 'Generate Ruby documentation using yard'
task :yard do
  require 'yard'
  YARD::Rake::YardocTask.new do |t|
    t.stats_options = %w(--list-undoc)
  end
end

desc 'Generate Ruby documentation'
task doc: %w(yard)

# Integration tests. Kitchen.ci
desc 'Run Test Kitchen integration tests'
namespace :integration do
  # Gets a collection of instances.
  #
  # @param regexp [String] regular expression to match against instance names.
  # @param config [Hash] configuration values for the `Kitchen::Config` class.
  # @return [Collection<Instance>] all instances.
  def kitchen_instances(regexp, config)
    instances = Kitchen::Config.new(config).instances
    instances = instances.get_all(Regexp.new(regexp)) unless regexp.nil? || regexp == 'all'
    raise Kitchen::UserError, "regexp '#{regexp}' matched 0 instances" if instances.empty?
    instances
  end

  # Runs a test kitchen action against some instances.
  #
  # @param action [String] kitchen action to run (defaults to `'test'`).
  # @param regexp [String] regular expression to match against instance names.
  # @param concurrency [#to_i] number of instances to run the action against concurrently.
  # @param loader_config [Hash] loader configuration options.
  # @return void
  def run_kitchen(action, regexp, concurrency, loader_config = {})
    require 'kitchen'
    Kitchen.logger = Kitchen.default_file_logger
    config = { loader: Kitchen::Loader::YAML.new(loader_config) }
    call_threaded(
      kitchen_instances(regexp, config),
      action,
      concurrency
    )
    # kitchen_instances(regexp, config).each { |i| i.send(action) }
  end

  # Calls a method on a list of objects in concurrent threads.
  #
  # @param objects [Array] list of objects.
  # @param method_name [#to_s] method to call on the objects.
  # @param concurrency [Integer] number of objects to call the method on concurrently.
  # @return void
  def call_threaded(objects, method_name, concurrency)
    threads = []
    raise 'concurrency must be > 0' if concurrency < 1
    objects.each do |obj|
      sleep 3 until threads.map(&:alive?).count(true) < concurrency
      threads << Thread.new { obj.method(method_name).call }
    end
    threads.map(&:join)
  end

  desc 'Run Test Kitchen integration tests using vagrant'
  task :vagrant, [:regexp, :action, :concurrency] do |_t, args|
    args.with_defaults(regexp: 'all', action: 'test', concurrency: 1)
    run_kitchen(
      args.action,
      args.regexp,
      args.concurrency.to_i
    )
  end

  desc 'Run Test Kitchen integration tests using docker'
  task :docker, [:regexp, :action, :concurrency] do |_t, args|
    args.with_defaults(regexp: 'all', action: 'test', concurrency: 1)
    run_kitchen(
      args.action,
      args.regexp,
      args.concurrency.to_i,
      project_config: '.kitchen.docker.yml'
    )
  end

  desc 'Run Test Kitchen integration tests in the cloud'
  task :cloud, [:regexp, :action, :concurrency] do |_t, args|
    args.with_defaults(regexp: 'all', action: 'test', concurrency: 1)
    run_kitchen(
      args.action,
      args.regexp,
      args.concurrency.to_i,
      project_config: '.kitchen.cloud.yml'
    )
  end
end

desc 'Run integration tests using preferred kitchen platform.'
task :integration, [:regexp, :action, :concurrency] =>
  ['integration:' + default_kitchenci_env]

desc 'Run doc, style, unit and integration tests using the cloud kitchen env'
task :cloud, [:regexp, :action, :concurrency] =>
  %w(doc style unit integration:cloud)

desc 'Run doc, style, unit and integration tests using the vagrant kitchen env'
task :vagrant, [:regexp, :action, :concurrency] =>
  %w(doc style unit integration:vagrant)

desc 'Run doc, style, unit and integration tests using the docker kitchen env'
task :docker, [:regexp, :action, :concurrency] =>
  %w(doc style unit integration:docker)

desc 'Run doc, style, unit and integration tests using the default kitchen env'
task default: [default_kitchenci_env]
